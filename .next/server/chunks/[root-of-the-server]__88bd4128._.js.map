{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/lib/blockchain.ts"],"sourcesContent":["import { ethers } from \"ethers\";\r\n\r\n\r\nlet _provider: ethers.providers.JsonRpcProvider | null = null;\r\nlet _signer: ethers.Wallet | null = null;\r\n\r\n\r\nexport function getProvider() {\r\n    if (_provider) return _provider;\r\n        const rpcUrl = process.env.RPC_URL;\r\n    if (!rpcUrl) throw new Error(\"RPC_URL non configurato\");\r\n        _provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL, 11155111);\r\n    return _provider;\r\n}\r\n\r\n\r\nexport function getServerSigner() {\r\n    if (_signer) return _signer;\r\n        const pk = process.env.WALLET_PRIVATE_KEY;\r\n    if (!pk) throw new Error(\"WALLET_PRIVATE_KEY non configurata\");\r\n        _signer = new ethers.Wallet(pk, getProvider());\r\n    return _signer;\r\n}\r\n\r\n\r\nexport function getContract<T = ethers.Contract>(abi: any) {\r\n    const address = process.env.CONTRACT_ADDRESS;\r\n    if (!address) throw new Error(\"CONTRACT_ADDRESS non configurato\");\r\n        return new ethers.Contract(address, abi, getServerSigner()) as unknown as T;\r\n}"],"names":[],"mappings":";;;;;AAAA;;AAGA,IAAI,YAAqD;AACzD,IAAI,UAAgC;AAG7B,SAAS;IACZ,IAAI,WAAW,OAAO;IAClB,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO;IACtC,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;IACzB,YAAY,IAAI,kLAAA,CAAA,SAAM,CAAC,SAAS,CAAC,eAAe,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;IAC1E,OAAO;AACX;AAGO,SAAS;IACZ,IAAI,SAAS,OAAO;IAChB,MAAM,KAAK,QAAQ,GAAG,CAAC,kBAAkB;IAC7C,IAAI,CAAC,IAAI,MAAM,IAAI,MAAM;IACrB,UAAU,IAAI,kLAAA,CAAA,SAAM,CAAC,MAAM,CAAC,IAAI;IACpC,OAAO;AACX;AAGO,SAAS,YAAiC,GAAQ;IACrD,MAAM,UAAU,QAAQ,GAAG,CAAC,gBAAgB;IAC5C,IAAI,CAAC,SAAS,MAAM,IAAI,MAAM;IAC1B,OAAO,IAAI,kLAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,SAAS,KAAK;AACjD","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/abi/CertificatiABI.ts"],"sourcesContent":["export const CertificatiABI = [\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"aggiungiCertificato\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"emittente\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"CertificatoAggiunto\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"CertificatoRimosso\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"rimuoviCertificato\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"certificati\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"emittente\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"timestamp\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"owner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"verificaCertificato\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"exists\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"emittente\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"timestamp\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n];"],"names":[],"mappings":";;;AAAO,MAAM,iBAAiB;IAC7B;QACC,UAAU;YACT;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,WAAW,EAAE;QACb,mBAAmB;QACnB,QAAQ;IACT;IACA;QACC,UAAU,EAAE;QACZ,mBAAmB;QACnB,QAAQ;IACT;IACA;QACC,aAAa;QACb,UAAU;YACT;gBACC,WAAW;gBACX,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;YACA;gBACC,WAAW;gBACX,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,QAAQ;IACT;IACA;QACC,aAAa;QACb,UAAU;YACT;gBACC,WAAW;gBACX,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,QAAQ;IACT;IACA;QACC,UAAU;YACT;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,WAAW,EAAE;QACb,mBAAmB;QACnB,QAAQ;IACT;IACA;QACC,UAAU;YACT;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,WAAW;YACV;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;YACA;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;YACA;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,mBAAmB;QACnB,QAAQ;IACT;IACA;QACC,UAAU,EAAE;QACZ,QAAQ;QACR,WAAW;YACV;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,mBAAmB;QACnB,QAAQ;IACT;IACA;QACC,UAAU;YACT;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,WAAW;YACV;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;YACA;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;YACA;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,mBAAmB;QACnB,QAAQ;IACT;CACA","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/api/aggiungi-certificato/route.ts"],"sourcesContent":["import { ethers } from \"ethers\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { getContract } from \"@/lib/blockchain\";\r\nimport { CertificatiABI } from \"@/abi/CertificatiABI\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { hash } = await req.json();\r\n    if (!hash || typeof hash !== \"string\") {\r\n      return NextResponse.json({ error: \"Hash mancante o non valido\" }, { status: 400 });\r\n    }\r\n\r\n    const contract = getContract(CertificatiABI);\r\n    const provider = new ethers.providers.JsonRpcProvider(\"https://eth-sepolia.g.alchemy.com/v2/DDXreGY5nanD7xm1_HMlVTNXeJGUp2JR\", 11155111);\r\n\r\n    try {\r\n    const network = await provider.getNetwork();\r\n    console.log(\"✅ Network rilevato:\", network);\r\n  } catch (err) {\r\n    console.error(\"❌ Impossibile rilevare la rete:\", err);\r\n  }\r\n\r\n    // Controlla se c’è bytecode all’indirizzo\r\n    const hash2 = \"a369055cf7d54fcb72cd8d14990218018b0fe2e63fe8e2e513a65693586ccc33\";\r\n    const formattedHash = ethers.utils.hexZeroPad(\"0x\" + hash2, 32); // forza a bytes32\r\n\r\n    const tx = await contract.aggiungiCertificato(formattedHash);\r\n    const receipt = await tx.wait();\r\n\r\n    return NextResponse.json({ txHash: tx.hash, blockNumber: receipt.blockNumber });\r\n \r\n    } catch (err: any) {\r\n    console.error(\"Errore API aggiungi-certificato:\", err);\r\n    return NextResponse.json({ error: err?.message ?? \"Errore interno\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAC/B,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,MAAM,WAAW,CAAA,GAAA,0HAAA,CAAA,cAAW,AAAD,EAAE,8HAAA,CAAA,iBAAc;QAC3C,MAAM,WAAW,IAAI,kLAAA,CAAA,SAAM,CAAC,SAAS,CAAC,eAAe,CAAC,yEAAyE;QAE/H,IAAI;YACJ,MAAM,UAAU,MAAM,SAAS,UAAU;YACzC,QAAQ,GAAG,CAAC,uBAAuB;QACrC,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,mCAAmC;QACnD;QAEE,0CAA0C;QAC1C,MAAM,QAAQ;QACd,MAAM,gBAAgB,kLAAA,CAAA,SAAM,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,OAAO,KAAK,kBAAkB;QAEnF,MAAM,KAAK,MAAM,SAAS,mBAAmB,CAAC;QAC9C,MAAM,UAAU,MAAM,GAAG,IAAI;QAE7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ,GAAG,IAAI;YAAE,aAAa,QAAQ,WAAW;QAAC;IAE7E,EAAE,OAAO,KAAU;QACnB,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,KAAK,WAAW;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}}]
}