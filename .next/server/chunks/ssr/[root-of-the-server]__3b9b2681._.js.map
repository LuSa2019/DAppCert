{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/lib/magic.ts"],"sourcesContent":["import { Magic } from 'magic-sdk';\r\n\r\nconst createMagic = () =>\r\n  typeof window !== 'undefined'\r\n    ? new Magic(process.env.NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY!, {\r\n        network: 'sepolia',\r\n      })\r\n    : null;\r\n\r\nexport const magic = createMagic();\r\n\r\nexport const getMagicProvider = () => magic?.rpcProvider || magic?.provider || null;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,cAAc,IAClB,6EAII;AAEC,MAAM,QAAQ;AAEd,MAAM,mBAAmB,IAAM,OAAO,eAAe,OAAO,YAAY","debugId":null}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/abi/CertificatiABI.ts"],"sourcesContent":["export const CertificatiABI = [\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"aggiungiCertificato\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"emittente\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"CertificatoAggiunto\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"CertificatoRimosso\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"rimuoviCertificato\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"certificati\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"emittente\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"timestamp\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"owner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"hash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"verificaCertificato\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"exists\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"emittente\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"timestamp\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n];"],"names":[],"mappings":";;;AAAO,MAAM,iBAAiB;IAC7B;QACC,UAAU;YACT;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,WAAW,EAAE;QACb,mBAAmB;QACnB,QAAQ;IACT;IACA;QACC,UAAU,EAAE;QACZ,mBAAmB;QACnB,QAAQ;IACT;IACA;QACC,aAAa;QACb,UAAU;YACT;gBACC,WAAW;gBACX,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;YACA;gBACC,WAAW;gBACX,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,QAAQ;IACT;IACA;QACC,aAAa;QACb,UAAU;YACT;gBACC,WAAW;gBACX,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,QAAQ;IACT;IACA;QACC,UAAU;YACT;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,WAAW,EAAE;QACb,mBAAmB;QACnB,QAAQ;IACT;IACA;QACC,UAAU;YACT;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,WAAW;YACV;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;YACA;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;YACA;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,mBAAmB;QACnB,QAAQ;IACT;IACA;QACC,UAAU,EAAE;QACZ,QAAQ;QACR,WAAW;YACV;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,mBAAmB;QACnB,QAAQ;IACT;IACA;QACC,UAAU;YACT;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,QAAQ;QACR,WAAW;YACV;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;YACA;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;YACA;gBACC,gBAAgB;gBAChB,QAAQ;gBACR,QAAQ;YACT;SACA;QACD,mBAAmB;QACnB,QAAQ;IACT;CACA","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/lib/contract.ts"],"sourcesContent":["import { getMagicProvider } from '@/lib/magic';\r\nimport { ethers } from 'ethers';\r\nimport { CertificatiABI } from \"@/abi/CertificatiABI\";\r\n\r\nconst CONTRACT_ADDRESS = '0x4c323D7a113edC4dfe9d639E0acFa7f47B722ed4';\r\n\r\nexport async function aggiungiCertificatoSuChain(hash: string) {\r\n  const magicProvider = getMagicProvider();\r\n  if (!magicProvider) throw new Error('Magic provider non disponibile');\r\n\r\n  // ethers v5 Web3Provider avvolge il provider Magic senza problemi\r\n  const provider = new ethers.providers.Web3Provider(magicProvider);\r\n  const signer = provider.getSigner();\r\n\r\n  const contract = new ethers.Contract(CONTRACT_ADDRESS, CertificatiABI, signer);\r\n  const tx = await contract.aggiungiCertificato(hash);\r\n  await tx.wait();\r\n\r\n  return tx.hash;\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,mBAAmB;AAElB,eAAe,2BAA2B,IAAY;IAC3D,MAAM,gBAAgB,CAAA,GAAA,mHAAA,CAAA,mBAAgB,AAAD;IACrC,IAAI,CAAC,eAAe,MAAM,IAAI,MAAM;IAEpC,kEAAkE;IAClE,MAAM,WAAW,IAAI,gLAAA,CAAA,SAAM,CAAC,SAAS,CAAC,YAAY,CAAC;IACnD,MAAM,SAAS,SAAS,SAAS;IAEjC,MAAM,WAAW,IAAI,gLAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,kBAAkB,4HAAA,CAAA,iBAAc,EAAE;IACvE,MAAM,KAAK,MAAM,SAAS,mBAAmB,CAAC;IAC9C,MAAM,GAAG,IAAI;IAEb,OAAO,GAAG,IAAI;AAChB","debugId":null}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/lib/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = 'https://rygyqxalcvxrekpfkqga.supabase.co';  \r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ5Z3lxeGFsY3Z4cmVrcGZrcWdhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MzM5NjcsImV4cCI6MjA2NjAwOTk2N30.lo2ydzPjibp2nl3W_hnhQNP4od_jprdw4RDVHyXKDJ0';        \r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc;AACpB,MAAM,kBAAkB;AAEjB,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/app/dashboard-entity/components/InsertCertificate.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { aggiungiCertificatoSuChain } from '@/lib/contract';\r\nimport { supabase } from '@/lib/supabaseClient';\r\n\r\ninterface InsertCertificateProps {\r\n  entityId: string; // da passare dal contesto/sessione\r\n}\r\n\r\nexport default function InsertCertificate({ entityId }: InsertCertificateProps) {\r\n  const [pdfFile, setPdfFile] = useState<File | null>(null);\r\n  const [formData, setFormData] = useState({\r\n    studentEmail: '',\r\n    corso: '',\r\n    data: '',\r\n  });\r\n  const [status, setStatus] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  const handlePdfChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.[0]) setPdfFile(e.target.files[0]);\r\n  };\r\n\r\n  const calculateHash = async (file: File): Promise<string> => {\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n    return hashHex;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setStatus(null);\r\n\r\n    if (!pdfFile) return setStatus('Seleziona un PDF');\r\n    if (!formData.studentEmail) return setStatus('Inserisci l\\'email dello studente');\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      // 1. Trova utente per email\r\n      const { data: users, error: userErr } = await supabase\r\n        .from('users')\r\n        .select('id')\r\n        .eq('email', formData.studentEmail)\r\n        .limit(1)\r\n        .single();\r\n\r\n      if (userErr || !users) {\r\n        setStatus('‚ùå Studente non trovato con questa email');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const studentId = users.id;\r\n\r\n      // 2. Calcola hash PDF\r\n      const hash = await calculateHash(pdfFile);\r\n\r\n      // 3. Interagisci con smart contract e ottieni txHash\r\n      const txHash = await aggiungiCertificatoSuChain(hash);\r\n      setStatus(`‚úÖ Transazione inviata: ${txHash}`);\r\n\r\n      // 4. Upload file\r\n      const fileName = `cert-${Date.now()}.pdf`;\r\n      const { data: uploaded, error: uploadErr } = await supabase.storage\r\n        .from('certificati')\r\n        .upload(fileName, pdfFile);\r\n\r\n      if (uploadErr) throw uploadErr;\r\n\r\n      // 5. Inserisci record certificato\r\n      const { error: insertErr } = await supabase\r\n        .from('certificates')\r\n        .insert({\r\n          student_id: studentId,\r\n          entity_id: entityId,\r\n          title: formData.corso,\r\n          description: '',\r\n          issued_date: formData.data,\r\n          blockchain_tx: txHash,\r\n        });\r\n\r\n      if (insertErr) throw insertErr;\r\n\r\n      setStatus('‚úÖ Certificato registrato con successo!');\r\n      setFormData({ studentEmail: '', corso: '', data: '' });\r\n      setPdfFile(null);\r\n    } catch (err: any) {\r\n      setStatus(`‚ùå Errore: ${err.message || String(err)}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-xl shadow-md max-w-2xl mx-auto\">\r\n      <h2 className=\"text-2xl font-bold mb-4 text-indigo-700\">Inserisci nuovo certificato</h2>\r\n\r\n      <form onSubmit={handleSubmit} className=\"flex flex-col gap-4\">\r\n        <input\r\n          type=\"email\"\r\n          name=\"studentEmail\"\r\n          value={formData.studentEmail}\r\n          onChange={handleChange}\r\n          placeholder=\"Email studente\"\r\n          className=\"border rounded p-2\"\r\n          required\r\n        />\r\n\r\n        <input\r\n          type=\"text\"\r\n          name=\"corso\"\r\n          value={formData.corso}\r\n          onChange={handleChange}\r\n          placeholder=\"Nome Corso\"\r\n          className=\"border rounded p-2\"\r\n          required\r\n        />\r\n\r\n        <input\r\n          type=\"date\"\r\n          name=\"data\"\r\n          value={formData.data}\r\n          onChange={handleChange}\r\n          className=\"border rounded p-2\"\r\n          required\r\n        />\r\n\r\n        <input\r\n          type=\"file\"\r\n          accept=\"application/pdf\"\r\n          onChange={handlePdfChange}\r\n          className=\"border rounded p-2\"\r\n          required\r\n        />\r\n\r\n        {status && (\r\n          <div className={`text-sm ${status.startsWith('‚úÖ') ? 'text-green-600' : 'text-red-600'}`}>\r\n            {status}\r\n          </div>\r\n        )}\r\n\r\n        <button\r\n          type=\"submit\"\r\n          disabled={loading}\r\n          className=\"bg-indigo-700 text-white py-2 px-4 rounded hover:bg-indigo-800\"\r\n        >\r\n          {loading ? 'Registrazione in corso...' : 'Registra Certificato'}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/app/actions/certificateActions.ts"],"sourcesContent":["'use server';\r\n\r\nimport { supabase } from '@/lib/supabaseClient';\r\n\r\n// Recupera tutti i certificati emessi da un dato ente\r\nexport async function getCertificatesByEntity(entityId: string) {\r\n  if (!entityId) throw new Error('ID ente mancante');\r\n\r\n  const { data, error } = await supabase\r\n    .from('certificates')\r\n    .select(`\r\n      id,\r\n      title,\r\n      description,\r\n      issued_date,\r\n      blockchain_tx,\r\n      users:student_id (\r\n        email,\r\n        nome,\r\n        cognome\r\n      )\r\n    `)\r\n    .eq('entity_id', entityId)\r\n    .order('issued_date', { ascending: false });\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n\r\n  const certificates = data.map((cert) => {\r\n    const student = Array.isArray(cert.users) ? cert.users[0] : cert.users;\r\n\r\n    return {\r\n      id: cert.id,\r\n      title: cert.title,\r\n      description: cert.description,\r\n      issued_date: cert.issued_date,\r\n      blockchain_tx: cert.blockchain_tx,\r\n      student_email: student?.email ?? 'N/A',\r\n      student_name: student ? `${student.nome} ${student.cognome}` : 'N/A',\r\n    };\r\n  });\r\n\r\n  return certificates;\r\n}\r\n\r\n// Elimina un certificato solo se appartiene all'ente corretto\r\nexport async function deleteCertificate(id: string, entityId: string) {\r\n  if (!id || !entityId) throw new Error('ID certificato o ente mancante');\r\n\r\n  const { error } = await supabase\r\n    .from('certificates')\r\n    .delete()\r\n    .eq('id', id)\r\n    .eq('entity_id', entityId); // sicurezza: l'ente pu√≤ cancellare solo i propri certificati\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAKsB,0BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 510, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/app/actions/certificateActions.ts"],"sourcesContent":["'use server';\r\n\r\nimport { supabase } from '@/lib/supabaseClient';\r\n\r\n// Recupera tutti i certificati emessi da un dato ente\r\nexport async function getCertificatesByEntity(entityId: string) {\r\n  if (!entityId) throw new Error('ID ente mancante');\r\n\r\n  const { data, error } = await supabase\r\n    .from('certificates')\r\n    .select(`\r\n      id,\r\n      title,\r\n      description,\r\n      issued_date,\r\n      blockchain_tx,\r\n      users:student_id (\r\n        email,\r\n        nome,\r\n        cognome\r\n      )\r\n    `)\r\n    .eq('entity_id', entityId)\r\n    .order('issued_date', { ascending: false });\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n\r\n  const certificates = data.map((cert) => {\r\n    const student = Array.isArray(cert.users) ? cert.users[0] : cert.users;\r\n\r\n    return {\r\n      id: cert.id,\r\n      title: cert.title,\r\n      description: cert.description,\r\n      issued_date: cert.issued_date,\r\n      blockchain_tx: cert.blockchain_tx,\r\n      student_email: student?.email ?? 'N/A',\r\n      student_name: student ? `${student.nome} ${student.cognome}` : 'N/A',\r\n    };\r\n  });\r\n\r\n  return certificates;\r\n}\r\n\r\n// Elimina un certificato solo se appartiene all'ente corretto\r\nexport async function deleteCertificate(id: string, entityId: string) {\r\n  if (!id || !entityId) throw new Error('ID certificato o ente mancante');\r\n\r\n  const { error } = await supabase\r\n    .from('certificates')\r\n    .delete()\r\n    .eq('id', id)\r\n    .eq('entity_id', entityId); // sicurezza: l'ente pu√≤ cancellare solo i propri certificati\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IA+CsB,oBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/app/dashboard-entity/components/CertificateList.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { Trash2 } from 'lucide-react';\r\nimport { getCertificatesByEntity, deleteCertificate } from '@/app/actions/certificateActions';\r\n\r\ntype Certificate = {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  issued_date: string;\r\n  student_name: string;\r\n  student_email: string;\r\n  blockchain_tx: string;\r\n};\r\n\r\ntype Props = {\r\n  entityId: string;\r\n};\r\n\r\nexport default function CertificateList({ entityId }: Props) {\r\n  const [certificates, setCertificates] = useState<Certificate[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCertificates = async () => {\r\n      try {\r\n        const data = await getCertificatesByEntity(entityId);\r\n        setCertificates(data);\r\n      } catch (err) {\r\n        setError('Errore durante il recupero dei certificati');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (entityId) fetchCertificates();\r\n  }, [entityId]);\r\n\r\n  const handleDelete = async (id: string) => {\r\n    try {\r\n      await deleteCertificate(id, entityId);\r\n      setCertificates((prev) => prev.filter((cert) => cert.id !== id));\r\n    } catch {\r\n      alert('Errore durante l\\'eliminazione del certificato');\r\n    }\r\n  };\r\n\r\n  if (loading) return <p className=\"text-white\">Caricamento certificati...</p>;\r\n  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n\r\n  return (\r\n    <section className=\"mt-8\">\r\n      <h2 className=\"text-2xl font-bold mb-4 text-white\">Certificati Emessi</h2>\r\n      {certificates.length === 0 ? (\r\n        <p className=\"text-gray-300\">Nessun certificato emesso.</p>\r\n      ) : (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n          {certificates.map((cert) => (\r\n            <div key={cert.id} className=\"bg-white p-4 rounded-xl shadow-md\">\r\n              <div className=\"flex justify-between items-start\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-bold text-indigo-800\">{cert.title}</h3>\r\n                  <p className=\"text-sm text-gray-600\">{cert.description}</p>\r\n                  <p className=\"text-sm mt-2\">\r\n                    <strong>Studente:</strong> {cert.student_name}\r\n                  </p>\r\n                  <p className=\"text-sm\">\r\n                    <strong>Email:</strong> {cert.student_email}\r\n                  </p>\r\n                  <p className=\"text-sm\">\r\n                    <strong>Data:</strong> {new Date(cert.issued_date).toLocaleDateString()}\r\n                  </p>\r\n                  <a\r\n                    href={`https://sepolia.etherscan.io/tx/${cert.blockchain_tx}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"text-sm text-blue-600 underline block mt-2\"\r\n                  >\r\n                    Visualizza transazione\r\n                  </a>\r\n                </div>\r\n                <button\r\n                  onClick={() => handleDelete(cert.id)}\r\n                  className=\"text-red-600 hover:text-red-800\"\r\n                  title=\"Elimina certificato\"\r\n                >\r\n                  <Trash2 />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAAA;AAJA;;;;;AAoBe,SAAS,gBAAgB,EAAE,QAAQ,EAAS;IACzD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE;IAClE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,oBAAoB;YACxB,IAAI;gBACF,MAAM,OAAO,MAAM,CAAA,GAAA,6JAAA,CAAA,0BAAuB,AAAD,EAAE;gBAC3C,gBAAgB;YAClB,EAAE,OAAO,KAAK;gBACZ,SAAS;YACX,SAAU;gBACR,WAAW;YACb;QACF;QAEA,IAAI,UAAU;IAChB,GAAG;QAAC;KAAS;IAEb,MAAM,eAAe,OAAO;QAC1B,IAAI;YACF,MAAM,CAAA,GAAA,6JAAA,CAAA,oBAAiB,AAAD,EAAE,IAAI;YAC5B,gBAAgB,CAAC,OAAS,KAAK,MAAM,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;QAC9D,EAAE,OAAM;YACN,MAAM;QACR;IACF;IAEA,IAAI,SAAS,qBAAO,8OAAC;QAAE,WAAU;kBAAa;;;;;;IAC9C,IAAI,OAAO,qBAAO,8OAAC;QAAE,WAAU;kBAAgB;;;;;;IAE/C,qBACE,8OAAC;QAAQ,WAAU;;0BACjB,8OAAC;gBAAG,WAAU;0BAAqC;;;;;;YAClD,aAAa,MAAM,KAAK,kBACvB,8OAAC;gBAAE,WAAU;0BAAgB;;;;;qCAE7B,8OAAC;gBAAI,WAAU;0BACZ,aAAa,GAAG,CAAC,CAAC,qBACjB,8OAAC;wBAAkB,WAAU;kCAC3B,cAAA,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;;sDACC,8OAAC;4CAAG,WAAU;sDAAqC,KAAK,KAAK;;;;;;sDAC7D,8OAAC;4CAAE,WAAU;sDAAyB,KAAK,WAAW;;;;;;sDACtD,8OAAC;4CAAE,WAAU;;8DACX,8OAAC;8DAAO;;;;;;gDAAkB;gDAAE,KAAK,YAAY;;;;;;;sDAE/C,8OAAC;4CAAE,WAAU;;8DACX,8OAAC;8DAAO;;;;;;gDAAe;gDAAE,KAAK,aAAa;;;;;;;sDAE7C,8OAAC;4CAAE,WAAU;;8DACX,8OAAC;8DAAO;;;;;;gDAAc;gDAAE,IAAI,KAAK,KAAK,WAAW,EAAE,kBAAkB;;;;;;;sDAEvE,8OAAC;4CACC,MAAM,CAAC,gCAAgC,EAAE,KAAK,aAAa,EAAE;4CAC7D,QAAO;4CACP,KAAI;4CACJ,WAAU;sDACX;;;;;;;;;;;;8CAIH,8OAAC;oCACC,SAAS,IAAM,aAAa,KAAK,EAAE;oCACnC,WAAU;oCACV,OAAM;8CAEN,cAAA,8OAAC,0MAAA,CAAA,SAAM;;;;;;;;;;;;;;;;uBA5BH,KAAK,EAAE;;;;;;;;;;;;;;;;AAqC7B","debugId":null}},
    {"offset": {"line": 736, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/app/dashboard-entity/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Upload, FileText, LogOut } from 'lucide-react';\r\nimport InsertCertificate from './components/InsertCertificate';\r\nimport CertificateList from './components/CertificateList';\r\n\r\nexport default function EntityDashboard() {\r\n  const [activeTab, setActiveTab] = useState<'insert' | 'list'>('insert');\r\n\r\n  // TODO: Sostituisci con il vero entityId preso dalla sessione o auth\r\n  const entityId = 'INSERISCI_QUI_L_ID_ENTE';\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex\">\r\n      {/* Sidebar */}\r\n      <aside className=\"w-64 bg-indigo-800 text-white p-6 flex flex-col gap-6\">\r\n        <h2 className=\"text-2xl font-bold mb-6\">UniChain - Ente</h2>\r\n\r\n        <button\r\n          onClick={() => setActiveTab('insert')}\r\n          className={`flex items-center gap-2 py-2 px-4 rounded-lg ${\r\n            activeTab === 'insert' ? 'bg-indigo-600' : 'hover:bg-indigo-700'\r\n          }`}\r\n        >\r\n          <Upload size={20} /> Inserisci Certificato\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => setActiveTab('list')}\r\n          className={`flex items-center gap-2 py-2 px-4 rounded-lg ${\r\n            activeTab === 'list' ? 'bg-indigo-600' : 'hover:bg-indigo-700'\r\n          }`}\r\n        >\r\n          <FileText size={20} /> Certificati Emessi\r\n        </button>\r\n\r\n        <div className=\"mt-auto\">\r\n          <button className=\"flex items-center gap-2 text-red-300 hover:text-red-100\">\r\n            <LogOut size={20} /> Logout\r\n          </button>\r\n        </div>\r\n      </aside>\r\n\r\n      {/* Content */}\r\n      <main className=\"flex-1 p-10 bg-gray-100 overflow-y-auto\">\r\n        {activeTab === 'insert' && <InsertCertificate entityId={entityId} />}\r\n        {activeTab === 'list' && <CertificateList entityId={entityId} />}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AALA;;;;;;AAOe,SAAS;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqB;IAE9D,qEAAqE;IACrE,MAAM,WAAW;IAEjB,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAM,WAAU;;kCACf,8OAAC;wBAAG,WAAU;kCAA0B;;;;;;kCAExC,8OAAC;wBACC,SAAS,IAAM,aAAa;wBAC5B,WAAW,CAAC,6CAA6C,EACvD,cAAc,WAAW,kBAAkB,uBAC3C;;0CAEF,8OAAC,sMAAA,CAAA,SAAM;gCAAC,MAAM;;;;;;4BAAM;;;;;;;kCAGtB,8OAAC;wBACC,SAAS,IAAM,aAAa;wBAC5B,WAAW,CAAC,6CAA6C,EACvD,cAAc,SAAS,kBAAkB,uBACzC;;0CAEF,8OAAC,8MAAA,CAAA,WAAQ;gCAAC,MAAM;;;;;;4BAAM;;;;;;;kCAGxB,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAO,WAAU;;8CAChB,8OAAC,0MAAA,CAAA,SAAM;oCAAC,MAAM;;;;;;gCAAM;;;;;;;;;;;;;;;;;;0BAM1B,8OAAC;gBAAK,WAAU;;oBACb,cAAc,0BAAY,8OAAC,qKAAA,CAAA,UAAiB;wBAAC,UAAU;;;;;;oBACvD,cAAc,wBAAU,8OAAC,mKAAA,CAAA,UAAe;wBAAC,UAAU;;;;;;;;;;;;;;;;;;AAI5D","debugId":null}}]
}