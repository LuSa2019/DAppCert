{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/dashboard-student/components/certificateActions.ts"],"sourcesContent":["'use server';\r\n\r\nimport { supabase } from '@/lib/supabaseClient';\r\n\r\nexport async function getCertificatesByStudent() {\r\n  const {\r\n    data: { user },\r\n    error: authError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (authError || !user) {\r\n    throw new Error('Utente non autenticato');\r\n  }\r\n\r\n  const { data, error } = await supabase\r\n    .from('certificates')\r\n    .select('id, title, description, issued_date, blockchain_tx, hash')\r\n    .eq('student_id', user.id)\r\n    .order('issued_date', { ascending: false });\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n\r\n  return data;\r\n}\r\n"],"names":[],"mappings":";;;;;;IAIsB,2BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/dashboard-student/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport Link from 'next/link';\r\nimport { getCertificatesByStudent } from './components/certificateActions';\r\nimport { FileText, Link as LinkIcon } from 'lucide-react';\r\n\r\ntype Certificate = {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  issued_date: string;\r\n  blockchain_tx: string;\r\n  hash: string;\r\n};\r\n\r\nexport default function CertificateListStudent() {\r\n  const [certificates, setCertificates] = useState<Certificate[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCertificates = async () => {\r\n      try {\r\n        const data = await getCertificatesByStudent();\r\n        setCertificates(data);\r\n      } catch (err) {\r\n        setError('Errore durante il caricamento dei certificati.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCertificates();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <p className=\"text-gray-700\">Caricamento certificati in corso...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"text-red-600\">{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <section className=\"mt-10 px-6\">\r\n      <h2 className=\"text-2xl font-bold text-indigo-800 mb-6\">I tuoi certificati</h2>\r\n\r\n      {certificates.length === 0 ? (\r\n        <div className=\"bg-yellow-100 text-yellow-800 px-4 py-3 rounded-md shadow\">\r\n          Nessun certificato presente.\r\n        </div>\r\n      ) : (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n          {certificates.map(cert => (\r\n            <div\r\n              key={cert.id}\r\n              className=\"bg-white rounded-xl p-5 shadow-md border border-gray-200\"\r\n            >\r\n              <div className=\"flex items-center gap-2 mb-2 text-indigo-700\">\r\n                <FileText />\r\n                <h3 className=\"text-lg font-semibold\">{cert.title}</h3>\r\n              </div>\r\n\r\n              <p className=\"text-gray-700 mb-2\">{cert.description}</p>\r\n              <p className=\"text-sm text-gray-500 mb-3\">\r\n                Emesso il: {new Date(cert.issued_date).toLocaleDateString()}\r\n              </p>\r\n\r\n              <div className=\"flex items-center gap-2\">\r\n                <LinkIcon className=\"text-green-600\" size={18} />\r\n                <Link\r\n                  href={`/verify?hash=${cert.hash}`}\r\n                  target=\"_blank\"\r\n                  className=\"text-sm text-blue-600 hover:underline\"\r\n                >\r\n                  Verifica certificato\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAAA;AALA;;;;;;AAgBe,SAAS;IACtB,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE;IAClE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,oBAAoB;YACxB,IAAI;gBACF,MAAM,OAAO,MAAM,CAAA,GAAA,wLAAA,CAAA,2BAAwB,AAAD;gBAC1C,gBAAgB;YAClB,EAAE,OAAO,KAAK;gBACZ,SAAS;YACX,SAAU;gBACR,WAAW;YACb;QACF;QAEA;IACF,GAAG,EAAE;IAEL,IAAI,SAAS;QACX,qBAAO,8OAAC;YAAE,WAAU;sBAAgB;;;;;;IACtC;IAEA,IAAI,OAAO;QACT,qBAAO,8OAAC;YAAE,WAAU;sBAAgB;;;;;;IACtC;IAEA,qBACE,8OAAC;QAAQ,WAAU;;0BACjB,8OAAC;gBAAG,WAAU;0BAA0C;;;;;;YAEvD,aAAa,MAAM,KAAK,kBACvB,8OAAC;gBAAI,WAAU;0BAA4D;;;;;qCAI3E,8OAAC;gBAAI,WAAU;0BACZ,aAAa,GAAG,CAAC,CAAA,qBAChB,8OAAC;wBAEC,WAAU;;0CAEV,8OAAC;gCAAI,WAAU;;kDACb,8OAAC,8MAAA,CAAA,WAAQ;;;;;kDACT,8OAAC;wCAAG,WAAU;kDAAyB,KAAK,KAAK;;;;;;;;;;;;0CAGnD,8OAAC;gCAAE,WAAU;0CAAsB,KAAK,WAAW;;;;;;0CACnD,8OAAC;gCAAE,WAAU;;oCAA6B;oCAC5B,IAAI,KAAK,KAAK,WAAW,EAAE,kBAAkB;;;;;;;0CAG3D,8OAAC;gCAAI,WAAU;;kDACb,8OAAC,kMAAA,CAAA,OAAQ;wCAAC,WAAU;wCAAiB,MAAM;;;;;;kDAC3C,8OAAC,4JAAA,CAAA,UAAI;wCACH,MAAM,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;wCACjC,QAAO;wCACP,WAAU;kDACX;;;;;;;;;;;;;uBAnBE,KAAK,EAAE;;;;;;;;;;;;;;;;AA6B1B","debugId":null}}]
}