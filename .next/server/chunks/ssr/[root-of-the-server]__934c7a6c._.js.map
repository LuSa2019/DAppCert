{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/lib/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = 'https://rygyqxalcvxrekpfkqga.supabase.co';  \r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ5Z3lxeGFsY3Z4cmVrcGZrcWdhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MzM5NjcsImV4cCI6MjA2NjAwOTk2N30.lo2ydzPjibp2nl3W_hnhQNP4od_jprdw4RDVHyXKDJ0';        \r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc;AACpB,MAAM,kBAAkB;AAEjB,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/actions/certificateActions.ts"],"sourcesContent":["'use server';\r\n\r\nimport { supabase } from '@/lib/supabaseClient';\r\n\r\n// 📌 Recupera tutti i certificati emessi da un dato ente\r\nexport async function getCertificatesByEntity(entityId: string) {\r\n  if (!entityId) throw new Error('ID ente mancante');\r\n\r\n  const { data, error } = await supabase\r\n    .from('certificates')\r\n    .select(`\r\n      id,\r\n      title,\r\n      description,\r\n      issued_date,\r\n      blockchain_tx,\r\n      users:student_id (\r\n        email,\r\n        nome,\r\n        cognome\r\n      )\r\n    `)\r\n    .eq('entity_id', entityId)\r\n    .order('issued_date', { ascending: false });\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n\r\n  const certificates = data.map((cert) => {\r\n    const student = Array.isArray(cert.users) ? cert.users[0] : cert.users;\r\n\r\n    return {\r\n      id: cert.id,\r\n      title: cert.title,\r\n      description: cert.description,\r\n      issued_date: cert.issued_date,\r\n      blockchain_tx: cert.blockchain_tx,\r\n      student_email: student?.email ?? 'N/A',\r\n      student_name: student ? `${student.nome} ${student.cognome}` : 'N/A',\r\n    };\r\n  });\r\n\r\n  return certificates;\r\n}\r\n\r\n// 📌 Recupera tutti i certificati di uno studente\r\nexport async function getCertificatesByStudent(studentEmail: string) {\r\n  if (!studentEmail) throw new Error('Email studente mancante');\r\n\r\n  // Trova id studente dalla sua email\r\n  const { data: student, error: userErr } = await supabase\r\n    .from('users')\r\n    .select('id')\r\n    .eq('email', studentEmail)\r\n    .single();\r\n\r\n  if (userErr || !student) throw new Error('Studente non trovato');\r\n\r\n  const { data, error } = await supabase\r\n    .from('certificates')\r\n    .select(`\r\n      id,\r\n      title,\r\n      description,\r\n      issued_date,\r\n      blockchain_tx,\r\n      users:entity_id (\r\n        email,\r\n        nome,\r\n        cognome\r\n      )\r\n    `)\r\n    .eq('student_id', student.id)\r\n    .order('issued_date', { ascending: false });\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n\r\n  const certificates = data.map((cert) => {\r\n    const entity = Array.isArray(cert.users) ? cert.users[0] : cert.users;\r\n\r\n    return {\r\n      id: cert.id,\r\n      title: cert.title,\r\n      description: cert.description,\r\n      issued_date: cert.issued_date,\r\n      blockchain_tx: cert.blockchain_tx,\r\n      entity_email: entity?.email ?? 'N/A',\r\n      entity_name: entity ? `${entity.nome} ${entity.cognome}` : 'N/A',\r\n    };\r\n  });\r\n\r\n  return certificates;\r\n}\r\n\r\n// 📌 Elimina un certificato solo se appartiene all'ente corretto\r\nexport async function deleteCertificate(id: string, entityId: string) {\r\n  if (!id || !entityId) throw new Error('ID certificato o ente mancante');\r\n\r\n  const { error } = await supabase\r\n    .from('certificates')\r\n    .delete()\r\n    .eq('id', id)\r\n    .eq('entity_id', entityId); // sicurezza: l'ente può cancellare solo i propri certificati\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IA+CsB,2BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/dashboard-student/components/StudentCertificateList.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { getCertificatesByStudent } from '@/app/actions/certificateActions';\r\n\r\ntype Certificate = {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  issued_date: string;\r\n  entity_name: string;\r\n  blockchain_tx: string;\r\n};\r\n\r\ntype Props = {\r\n  studentEmail: string;\r\n};\r\n\r\nexport default function StudentCertificateList({ studentEmail }: Props) {\r\n  const [certificates, setCertificates] = useState<Certificate[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCertificates = async () => {\r\n      try {\r\n        const data = await getCertificatesByStudent(studentEmail);\r\n        setCertificates(data);\r\n      } catch {\r\n        setError('Errore durante il recupero dei certificati');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (studentEmail) fetchCertificates();\r\n  }, [studentEmail]);\r\n\r\n  if (loading) return <p className=\"text-gray-700\">Caricamento certificati...</p>;\r\n  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n\r\n  return (\r\n    <section className=\"mt-8\">\r\n      <h2 className=\"text-2xl font-bold mb-4 text-green-700\">I miei certificati</h2>\r\n      {certificates.length === 0 ? (\r\n        <p className=\"text-gray-500\">Nessun certificato disponibile.</p>\r\n      ) : (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n          {certificates.map((cert) => (\r\n            <div key={cert.id} className=\"bg-white p-4 rounded-xl shadow-md border\">\r\n              <h3 className=\"text-lg font-bold text-green-800\">{cert.title}</h3>\r\n              <p className=\"text-sm text-gray-600\">{cert.description}</p>\r\n              <p className=\"text-sm mt-2\">\r\n                <strong>Ente:</strong> {cert.entity_name}\r\n              </p>\r\n              <p className=\"text-sm\">\r\n                <strong>Data:</strong> {new Date(cert.issued_date).toLocaleDateString()}\r\n              </p>\r\n              <a\r\n                href={`https://sepolia.etherscan.io/tx/${cert.blockchain_tx}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"text-sm text-blue-600 underline block mt-2\"\r\n              >\r\n                Visualizza transazione\r\n              </a>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAkBe,SAAS,uBAAuB,EAAE,YAAY,EAAS;IACpE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE;IAClE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,oBAAoB;YACxB,IAAI;gBACF,MAAM,OAAO,MAAM,CAAA,GAAA,6JAAA,CAAA,2BAAwB,AAAD,EAAE;gBAC5C,gBAAgB;YAClB,EAAE,OAAM;gBACN,SAAS;YACX,SAAU;gBACR,WAAW;YACb;QACF;QAEA,IAAI,cAAc;IACpB,GAAG;QAAC;KAAa;IAEjB,IAAI,SAAS,qBAAO,8OAAC;QAAE,WAAU;kBAAgB;;;;;;IACjD,IAAI,OAAO,qBAAO,8OAAC;QAAE,WAAU;kBAAgB;;;;;;IAE/C,qBACE,8OAAC;QAAQ,WAAU;;0BACjB,8OAAC;gBAAG,WAAU;0BAAyC;;;;;;YACtD,aAAa,MAAM,KAAK,kBACvB,8OAAC;gBAAE,WAAU;0BAAgB;;;;;qCAE7B,8OAAC;gBAAI,WAAU;0BACZ,aAAa,GAAG,CAAC,CAAC,qBACjB,8OAAC;wBAAkB,WAAU;;0CAC3B,8OAAC;gCAAG,WAAU;0CAAoC,KAAK,KAAK;;;;;;0CAC5D,8OAAC;gCAAE,WAAU;0CAAyB,KAAK,WAAW;;;;;;0CACtD,8OAAC;gCAAE,WAAU;;kDACX,8OAAC;kDAAO;;;;;;oCAAc;oCAAE,KAAK,WAAW;;;;;;;0CAE1C,8OAAC;gCAAE,WAAU;;kDACX,8OAAC;kDAAO;;;;;;oCAAc;oCAAE,IAAI,KAAK,KAAK,WAAW,EAAE,kBAAkB;;;;;;;0CAEvE,8OAAC;gCACC,MAAM,CAAC,gCAAgC,EAAE,KAAK,aAAa,EAAE;gCAC7D,QAAO;gCACP,KAAI;gCACJ,WAAU;0CACX;;;;;;;uBAdO,KAAK,EAAE;;;;;;;;;;;;;;;;AAuB7B","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/dashboard-student/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { supabase } from '@/lib/supabaseClient';\r\nimport StudentCertificateList from './components/StudentCertificateList';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nexport default function StudentDashboard() {\r\n  const [studentEmail, setStudentEmail] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    const fetchStudent = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Recupera email salvata al login\r\n        const email = localStorage.getItem('userEmail');\r\n        if (!email) throw new Error('Nessuna email trovata in sessione');\r\n\r\n        // Controlla che lo studente esista\r\n        const { data, error: studentErr } = await supabase\r\n          .from('users')\r\n          .select('id, email')\r\n          .eq('email', email)\r\n          .single();\r\n\r\n        if (studentErr) throw studentErr;\r\n        if (!data) throw new Error('Studente non trovato');\r\n\r\n        setStudentEmail(email);\r\n      } catch (err: unknown) {\r\n        console.error('Errore fetchStudent:', err);\r\n        setError('Errore nel recupero dello studente');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchStudent();\r\n  }, []);\r\n\r\n  const handleLogout = async () => {\r\n    await supabase.auth.signOut();\r\n    localStorage.removeItem('userEmail'); // 🔑 pulizia\r\n    router.push('/'); // 🔑 redirect alla home\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"p-4 text-gray-100\">⏳ Caricamento...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"p-4 text-red-200\">❌ {error}</div>;\r\n  }\r\n\r\n  if (!studentEmail) {\r\n    return <div className=\"p-4 text-red-200\">❌ Nessuno studente associato a questo account</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-green-700 to-green-900 py-10 px-6\">\r\n      <div className=\"max-w-4xl mx-auto bg-white p-6 rounded-xl shadow-md\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <h1 className=\"text-2xl font-bold text-green-700\">Dashboard Studente</h1>\r\n          <button\r\n            onClick={handleLogout}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition\"\r\n          >\r\n            🚪 Logout\r\n          </button>\r\n        </div>\r\n\r\n        <StudentCertificateList studentEmail={studentEmail} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAOe,SAAS;IACtB,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAChE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,eAAe;YACnB,IAAI;gBACF,WAAW;gBAEX,kCAAkC;gBAClC,MAAM,QAAQ,aAAa,OAAO,CAAC;gBACnC,IAAI,CAAC,OAAO,MAAM,IAAI,MAAM;gBAE5B,mCAAmC;gBACnC,MAAM,EAAE,IAAI,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,4HAAA,CAAA,WAAQ,CAC/C,IAAI,CAAC,SACL,MAAM,CAAC,aACP,EAAE,CAAC,SAAS,OACZ,MAAM;gBAET,IAAI,YAAY,MAAM;gBACtB,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;gBAE3B,gBAAgB;YAClB,EAAE,OAAO,KAAc;gBACrB,QAAQ,KAAK,CAAC,wBAAwB;gBACtC,SAAS;YACX,SAAU;gBACR,WAAW;YACb;QACF;QAEA;IACF,GAAG,EAAE;IAEL,MAAM,eAAe;QACnB,MAAM,4HAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,OAAO;QAC3B,aAAa,UAAU,CAAC,cAAc,aAAa;QACnD,OAAO,IAAI,CAAC,MAAM,wBAAwB;IAC5C;IAEA,IAAI,SAAS;QACX,qBAAO,8OAAC;YAAI,WAAU;sBAAoB;;;;;;IAC5C;IAEA,IAAI,OAAO;QACT,qBAAO,8OAAC;YAAI,WAAU;;gBAAmB;gBAAG;;;;;;;IAC9C;IAEA,IAAI,CAAC,cAAc;QACjB,qBAAO,8OAAC;YAAI,WAAU;sBAAmB;;;;;;IAC3C;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;sCAAoC;;;;;;sCAClD,8OAAC;4BACC,SAAS;4BACT,WAAU;sCACX;;;;;;;;;;;;8BAKH,8OAAC,2KAAA,CAAA,UAAsB;oBAAC,cAAc;;;;;;;;;;;;;;;;;AAI9C","debugId":null}}]
}