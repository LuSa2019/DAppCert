{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/lib/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = 'https://rygyqxalcvxrekpfkqga.supabase.co';  \r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ5Z3lxeGFsY3Z4cmVrcGZrcWdhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MzM5NjcsImV4cCI6MjA2NjAwOTk2N30.lo2ydzPjibp2nl3W_hnhQNP4od_jprdw4RDVHyXKDJ0';        \r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc;AACpB,MAAM,kBAAkB;AAEjB,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/lib/contract.ts"],"sourcesContent":["\r\nexport async function aggiungiCertificatoSuChain(hash: string): Promise<string> {\r\n  const res = await fetch(\"/api/aggiungi-certificato\", {\r\n  method: \"POST\",\r\n  headers: { \"Content-Type\": \"application/json\" },\r\n  body: JSON.stringify({ hash }),\r\n  });\r\n\r\n\r\n  if (!res.ok) {\r\n    let msg = \"Errore invio transazione\";\r\n  try {\r\n    const j = await res.json();\r\n  msg = j.error || msg;\r\n  } catch {}\r\n    throw new Error(msg);\r\n  }\r\n\r\n\r\n  const data = await res.json();\r\n  return data.txHash as string;\r\n}\r\n"],"names":[],"mappings":";;;AACO,eAAe,2BAA2B,IAAY;IAC3D,MAAM,MAAM,MAAM,MAAM,6BAA6B;QACrD,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;YAAE;QAAK;IAC5B;IAGA,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,IAAI,MAAM;QACZ,IAAI;YACF,MAAM,IAAI,MAAM,IAAI,IAAI;YAC1B,MAAM,EAAE,KAAK,IAAI;QACjB,EAAE,OAAM,CAAC;QACP,MAAM,IAAI,MAAM;IAClB;IAGA,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,OAAO,KAAK,MAAM;AACpB","debugId":null}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/dashboard-entity/components/InsertCertificate.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { aggiungiCertificatoSuChain } from '@/lib/contract';\r\nimport { supabase } from '@/lib/supabaseClient';\r\n\r\ninterface InsertCertificateProps {\r\n  entityId: string; // da passare dal contesto/sessione\r\n}\r\n\r\nexport default function InsertCertificate({ entityId }: InsertCertificateProps) {\r\n  const [pdfFile, setPdfFile] = useState<File | null>(null);\r\n  const [formData, setFormData] = useState({\r\n    studentEmail: '',\r\n    corso: '',\r\n    descrizione: '',\r\n    data: '',\r\n  });\r\n  const [status, setStatus] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  const handlePdfChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.[0]) setPdfFile(e.target.files[0]);\r\n  };\r\n\r\n  const calculateHash = async (file: File): Promise<string> => {\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n    return hashHex;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setStatus(null);\r\n\r\n    if (!pdfFile) return setStatus('Seleziona un PDF');\r\n    if (!formData.studentEmail) return setStatus('Inserisci l\\'email dello studente');\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      // 1. Trova utente per email\r\n      const { data: users, error: userErr } = await supabase\r\n        .from('users')\r\n        .select('id')\r\n        .eq('email', formData.studentEmail)\r\n        .limit(1)\r\n        .single();\r\n\r\n      if (userErr || !users) {\r\n        setStatus('❌ Studente non trovato con questa email');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const studentId = users.id;\r\n\r\n      // 2. Calcola hash PDF\r\n      const hash = await calculateHash(pdfFile);\r\n\r\n      // 3. Interagisci con smart contract e ottieni txHash\r\n      const txHash = await aggiungiCertificatoSuChain(hash);\r\n      setStatus(`✅ Transazione inviata: ${txHash}`);\r\n\r\n/*      \r\n      // 4. Upload file\r\n      const fileName = `cert-${Date.now()}.pdf`;\r\n      const { error: uploadErr } = await supabase.storage\r\n        .from('certificati')\r\n        .upload(fileName, pdfFile);\r\n      \r\n      if (uploadErr) throw uploadErr;\r\n    */\r\n      // 5. Inserisci record certificato\r\n      const { error: insertErr } = await supabase\r\n        .from('certificates')\r\n        .insert({\r\n          student_id: studentId,\r\n          entity_id: entityId,\r\n          title: formData.corso,\r\n          description: formData.descrizione,\r\n          issued_date: formData.data,\r\n          blockchain_tx: txHash,\r\n          //file_path: fileName,\r\n        });\r\n\r\n      if (insertErr) throw insertErr;\r\n\r\n      setStatus('✅ Certificato registrato con successo!');\r\n      setFormData({ studentEmail: '', corso: '', descrizione: '', data: '' });\r\n      setPdfFile(null);\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        setStatus(`❌ Errore: ${err.message}`);\r\n      } else {\r\n        setStatus('❌ Errore sconosciuto');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-xl shadow-md max-w-2xl mx-auto\">\r\n      <h2 className=\"text-2xl font-bold mb-4 text-indigo-700\">Inserisci nuovo certificato</h2>\r\n\r\n      <form onSubmit={handleSubmit} className=\"flex flex-col gap-4\">\r\n        <input\r\n          type=\"email\"\r\n          name=\"studentEmail\"\r\n          value={formData.studentEmail}\r\n          onChange={handleChange}\r\n          placeholder=\"Email studente\"\r\n          className=\"border rounded p-2\"\r\n          required\r\n        />\r\n\r\n        <input\r\n          type=\"text\"\r\n          name=\"corso\"\r\n          value={formData.corso}\r\n          onChange={handleChange}\r\n          placeholder=\"Nome Corso\"\r\n          className=\"border rounded p-2\"\r\n          required\r\n        />\r\n\r\n        <textarea\r\n          name=\"descrizione\"\r\n          value={formData.descrizione}\r\n          onChange={handleChange}\r\n          placeholder=\"Descrizione certificato\"\r\n          className=\"border rounded p-2\"\r\n          required\r\n        />\r\n\r\n        <input\r\n          type=\"date\"\r\n          name=\"data\"\r\n          value={formData.data}\r\n          onChange={handleChange}\r\n          className=\"border rounded p-2\"\r\n          required\r\n        />\r\n\r\n        <input\r\n          type=\"file\"\r\n          accept=\"application/pdf\"\r\n          onChange={handlePdfChange}\r\n          className=\"border rounded p-2\"\r\n          required\r\n        />\r\n\r\n        {status && (\r\n          <div className={`text-sm ${status.startsWith('✅') ? 'text-green-600' : 'text-red-600'}`}>\r\n            {status}\r\n          </div>\r\n        )}\r\n\r\n        <button\r\n          type=\"submit\"\r\n          disabled={loading}\r\n          className=\"bg-indigo-700 text-white py-2 px-4 rounded hover:bg-indigo-800\"\r\n        >\r\n          {loading ? 'Registrazione in corso...' : 'Registra Certificato'}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/actions/certificateActions.ts"],"sourcesContent":["'use server';\r\n\r\nimport { supabase } from '@/lib/supabaseClient';\r\n\r\n// ✅ Recupera certificati emessi da un ente\r\nexport async function getCertificatesByEntity(entityId: string) {\r\n  if (!entityId) throw new Error('ID ente mancante');\r\n\r\n  const { data, error } = await supabase\r\n    .from('certificates')\r\n    .select(`\r\n      id,\r\n      title,\r\n      description,\r\n      issued_date,\r\n      blockchain_tx,\r\n      users:student_id (\r\n        email,\r\n        nome,\r\n        cognome\r\n      )\r\n    `)\r\n    .eq('entity_id', entityId)\r\n    .order('issued_date', { ascending: false });\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n\r\n  return data.map((cert) => {\r\n    const student = Array.isArray(cert.users) ? cert.users[0] : cert.users;\r\n    return {\r\n      id: cert.id,\r\n      title: cert.title,\r\n      description: cert.description,\r\n      issued_date: cert.issued_date,\r\n      blockchain_tx: cert.blockchain_tx,\r\n      student_email: student?.email ?? 'N/A',\r\n      student_name: student ? `${student.nome} ${student.cognome}` : 'N/A',\r\n    };\r\n  });\r\n}\r\n\r\n// ✅ Recupera certificati di uno studente\r\nexport async function getCertificatesByStudent(studentId: string) {\r\n  if (!studentId) throw new Error('ID studente mancante');\r\n\r\n  const { data, error } = await supabase\r\n    .from('certificates')\r\n    .select(`\r\n      id,\r\n      title,\r\n      description,\r\n      issued_date,\r\n      blockchain_tx,\r\n      entities:entity_id (\r\n        nome_ente,\r\n        email\r\n      )\r\n    `)\r\n    .eq('student_id', studentId)\r\n    .order('issued_date', { ascending: false });\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n\r\n  return data.map((cert) => {\r\n    const entity = Array.isArray(cert.entities) ? cert.entities[0] : cert.entities;\r\n    return {\r\n      id: cert.id,\r\n      title: cert.title,\r\n      description: cert.description,\r\n      issued_date: cert.issued_date,\r\n      blockchain_tx: cert.blockchain_tx,\r\n      entity_name: entity?.nome_ente ?? 'N/A',\r\n      entity_email: entity?.email ?? 'N/A',\r\n    };\r\n  });\r\n}\r\n\r\n// ✅ Elimina un certificato (solo ente proprietario)\r\nexport async function deleteCertificate(id: string, entityId: string) {\r\n  if (!id || !entityId) throw new Error('ID certificato o ente mancante');\r\n\r\n  const { error } = await supabase\r\n    .from('certificates')\r\n    .delete()\r\n    .eq('id', id)\r\n    .eq('entity_id', entityId);\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAKsB,0BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/actions/certificateActions.ts"],"sourcesContent":["'use server';\r\n\r\nimport { supabase } from '@/lib/supabaseClient';\r\n\r\n// ✅ Recupera certificati emessi da un ente\r\nexport async function getCertificatesByEntity(entityId: string) {\r\n  if (!entityId) throw new Error('ID ente mancante');\r\n\r\n  const { data, error } = await supabase\r\n    .from('certificates')\r\n    .select(`\r\n      id,\r\n      title,\r\n      description,\r\n      issued_date,\r\n      blockchain_tx,\r\n      users:student_id (\r\n        email,\r\n        nome,\r\n        cognome\r\n      )\r\n    `)\r\n    .eq('entity_id', entityId)\r\n    .order('issued_date', { ascending: false });\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n\r\n  return data.map((cert) => {\r\n    const student = Array.isArray(cert.users) ? cert.users[0] : cert.users;\r\n    return {\r\n      id: cert.id,\r\n      title: cert.title,\r\n      description: cert.description,\r\n      issued_date: cert.issued_date,\r\n      blockchain_tx: cert.blockchain_tx,\r\n      student_email: student?.email ?? 'N/A',\r\n      student_name: student ? `${student.nome} ${student.cognome}` : 'N/A',\r\n    };\r\n  });\r\n}\r\n\r\n// ✅ Recupera certificati di uno studente\r\nexport async function getCertificatesByStudent(studentId: string) {\r\n  if (!studentId) throw new Error('ID studente mancante');\r\n\r\n  const { data, error } = await supabase\r\n    .from('certificates')\r\n    .select(`\r\n      id,\r\n      title,\r\n      description,\r\n      issued_date,\r\n      blockchain_tx,\r\n      entities:entity_id (\r\n        nome_ente,\r\n        email\r\n      )\r\n    `)\r\n    .eq('student_id', studentId)\r\n    .order('issued_date', { ascending: false });\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n\r\n  return data.map((cert) => {\r\n    const entity = Array.isArray(cert.entities) ? cert.entities[0] : cert.entities;\r\n    return {\r\n      id: cert.id,\r\n      title: cert.title,\r\n      description: cert.description,\r\n      issued_date: cert.issued_date,\r\n      blockchain_tx: cert.blockchain_tx,\r\n      entity_name: entity?.nome_ente ?? 'N/A',\r\n      entity_email: entity?.email ?? 'N/A',\r\n    };\r\n  });\r\n}\r\n\r\n// ✅ Elimina un certificato (solo ente proprietario)\r\nexport async function deleteCertificate(id: string, entityId: string) {\r\n  if (!id || !entityId) throw new Error('ID certificato o ente mancante');\r\n\r\n  const { error } = await supabase\r\n    .from('certificates')\r\n    .delete()\r\n    .eq('id', id)\r\n    .eq('entity_id', entityId);\r\n\r\n  if (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAkFsB,oBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 380, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/dashboard-entity/components/CertificateList.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState, useMemo } from 'react';\r\nimport { Trash2 } from 'lucide-react';\r\nimport { getCertificatesByEntity, deleteCertificate } from '@/app/actions/certificateActions';\r\n\r\ntype Certificate = {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  issued_date: string;\r\n  student_name: string;\r\n  student_email: string;\r\n  blockchain_tx: string;\r\n};\r\n\r\ntype Props = {\r\n  entityId: string;\r\n};\r\n\r\nexport default function CertificateList({ entityId }: Props) {\r\n  const [certificates, setCertificates] = useState<Certificate[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [search, setSearch] = useState<string>('');\r\n  const [page, setPage] = useState<number>(1);\r\n  const pageSize = 10;\r\n\r\n  useEffect(() => {\r\n    const fetchCertificates = async () => {\r\n      try {\r\n        const data = await getCertificatesByEntity(entityId);\r\n        setCertificates(data);\r\n      } catch {\r\n        setError('Errore durante il recupero dei certificati');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (entityId) fetchCertificates();\r\n  }, [entityId]);\r\n\r\n  // 🔍 Filtraggio in tempo reale (titolo, descrizione, nome, email)\r\n  const filteredCertificates = useMemo(() => {\r\n    return certificates.filter((cert) => {\r\n      const query = search.toLowerCase();\r\n      return (\r\n        cert.title.toLowerCase().includes(query) ||\r\n        (cert.description?.toLowerCase() ?? '').includes(query) ||\r\n        cert.student_name.toLowerCase().includes(query) ||\r\n        cert.student_email.toLowerCase().includes(query)\r\n      );\r\n    });\r\n  }, [certificates, search]);\r\n\r\n  // 📄 Paginazione\r\n  const totalPages = Math.ceil(filteredCertificates.length / pageSize);\r\n  const paginatedCertificates = filteredCertificates.slice(\r\n    (page - 1) * pageSize,\r\n    page * pageSize\r\n  );\r\n\r\n  const handleDelete = async (id: string) => {\r\n    try {\r\n      await deleteCertificate(id, entityId);\r\n      setCertificates((prev) => prev.filter((cert) => cert.id !== id));\r\n    } catch {\r\n      alert(\"Errore durante l'eliminazione del certificato\");\r\n    }\r\n  };\r\n\r\n  if (loading) return <p className=\"text-white\">Caricamento certificati...</p>;\r\n  if (error) return <p className=\"text-red-500\">{error}</p>;\r\n\r\n  return (\r\n    <section className=\"mt-8\">\r\n      <div className=\"flex items-center gap-2 mb-2\">\r\n        <span className=\"text-2xl\">📜</span>\r\n        <h2 className=\"text-2xl font-bold text-white\">Certificati Emessi</h2>\r\n      </div>\r\n      <p className=\"text-sm text-gray-300 mb-4\">\r\n        Puoi ricercare i certificati per titolo, descrizione, nome o email dello studente.\r\n      </p>\r\n\r\n      {/* 🔍 Search box */}\r\n      <input\r\n        type=\"text\"\r\n        value={search}\r\n        onChange={(e) => {\r\n          setSearch(e.target.value);\r\n          setPage(1);\r\n        }}\r\n        placeholder=\"🔍 Cerca certificati...\"\r\n        className=\"w-full p-2 mb-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n      />\r\n\r\n      {paginatedCertificates.length === 0 ? (\r\n        <p className=\"text-gray-300\">Nessun certificato trovato.</p>\r\n      ) : (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n          {paginatedCertificates.map((cert) => (\r\n            <div key={cert.id} className=\"bg-white p-4 rounded-xl shadow-md\">\r\n              <div className=\"flex justify-between items-start\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-bold text-indigo-800\">{cert.title}</h3>\r\n                  <p className=\"text-sm text-gray-600\">{cert.description}</p>\r\n                  <p className=\"text-sm mt-2\">\r\n                    <strong>Studente:</strong> {cert.student_name}\r\n                  </p>\r\n                  <p className=\"text-sm\">\r\n                    <strong>Email:</strong> {cert.student_email}\r\n                  </p>\r\n                  <p className=\"text-sm\">\r\n                    <strong>Data:</strong> {new Date(cert.issued_date).toLocaleDateString()}\r\n                  </p>\r\n                  <a\r\n                    href={`https://sepolia.etherscan.io/tx/${cert.blockchain_tx}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"text-sm text-blue-600 underline block mt-2\"\r\n                  >\r\n                    Visualizza transazione\r\n                  </a>\r\n                </div>\r\n                <button\r\n                  onClick={() => handleDelete(cert.id)}\r\n                  className=\"text-red-600 hover:text-red-800\"\r\n                  title=\"Elimina certificato\"\r\n                >\r\n                  <Trash2 />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* 📄 Paginazione */}\r\n      {totalPages > 1 && (\r\n        <div className=\"flex justify-center items-center gap-4 mt-6 text-white\">\r\n          <button\r\n            onClick={() => setPage((p) => Math.max(p - 1, 1))}\r\n            disabled={page === 1}\r\n            className=\"px-3 py-1 bg-gray-200 text-gray-800 rounded disabled:opacity-50\"\r\n          >\r\n            ◀ Precedente\r\n          </button>\r\n          <span>\r\n            Pagina {page} di {totalPages}\r\n          </span>\r\n          <button\r\n            onClick={() => setPage((p) => Math.min(p + 1, totalPages))}\r\n            disabled={page === totalPages}\r\n            className=\"px-3 py-1 bg-gray-200 text-gray-800 rounded disabled:opacity-50\"\r\n          >\r\n            Successiva ▶\r\n          </button>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 713, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/dashboard-entity/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { supabase } from '@/lib/supabaseClient';\r\nimport InsertCertificate from './components/InsertCertificate';\r\nimport CertificateList from './components/CertificateList';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nexport default function EntityDashboard() {\r\n  const [activeTab, setActiveTab] = useState<'insert' | 'list'>('insert');\r\n  const [entityId, setEntityId] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    const fetchEntity = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Recupera email salvata al login\r\n        const email = localStorage.getItem('userEmail');\r\n        if (!email) throw new Error('Nessuna email trovata in sessione');\r\n\r\n        // Recupera entity_id dalla tabella entities\r\n        const { data, error: entityErr } = await supabase\r\n          .from('entities')\r\n          .select('id')\r\n          .eq('email', email)\r\n          .single();\r\n\r\n        if (entityErr) throw entityErr;\r\n        if (!data) throw new Error('Ente non trovato');\r\n\r\n        setEntityId(data.id);\r\n      } catch (err: unknown) {\r\n        console.error(\"Errore fetchEntity:\", err);\r\n        setError('Errore nel recupero dell’ente');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchEntity();\r\n  }, []);\r\n\r\n  const handleLogout = async () => {\r\n    await supabase.auth.signOut();\r\n    localStorage.removeItem('userEmail'); // 🔑 pulizia\r\n    router.push('/'); // 🔑 redirect alla home\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"p-4 text-gray-100\">⏳ Caricamento...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"p-4 text-red-200\">❌ {error}</div>;\r\n  }\r\n\r\n  if (!entityId) {\r\n    return <div className=\"p-4 text-red-200\">❌ Nessun ente associato a questo account</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-700 to-indigo-900 py-10 px-6\">\r\n      <div className=\"max-w-4xl mx-auto bg-white p-6 rounded-xl shadow-md\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <h1 className=\"text-2xl font-bold text-indigo-700\">Dashboard Ente</h1>\r\n          <button\r\n            onClick={handleLogout}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition\"\r\n          >\r\n            🚪 Logout\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"flex gap-4 mb-6 border-b pb-2\">\r\n          <button\r\n            onClick={() => setActiveTab('insert')}\r\n            className={`px-4 py-2 rounded-t-lg ${\r\n              activeTab === 'insert' ? 'bg-indigo-700 text-white' : 'bg-gray-200 text-gray-700'\r\n            }`}\r\n          >\r\n            ➕ Inserisci Certificato\r\n          </button>\r\n          <button\r\n            onClick={() => setActiveTab('list')}\r\n            className={`px-4 py-2 rounded-t-lg ${\r\n              activeTab === 'list' ? 'bg-indigo-700 text-white' : 'bg-gray-200 text-gray-700'\r\n            }`}\r\n          >\r\n            📜 Lista Certificati\r\n          </button>\r\n        </div>\r\n\r\n        {activeTab === 'insert' ? (\r\n          <InsertCertificate entityId={entityId} />\r\n        ) : (\r\n          <CertificateList entityId={entityId} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AANA;;;;;;;AAQe,SAAS;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqB;IAC9D,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACxD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,cAAc;YAClB,IAAI;gBACF,WAAW;gBAEX,kCAAkC;gBAClC,MAAM,QAAQ,aAAa,OAAO,CAAC;gBACnC,IAAI,CAAC,OAAO,MAAM,IAAI,MAAM;gBAE5B,4CAA4C;gBAC5C,MAAM,EAAE,IAAI,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,4HAAA,CAAA,WAAQ,CAC9C,IAAI,CAAC,YACL,MAAM,CAAC,MACP,EAAE,CAAC,SAAS,OACZ,MAAM;gBAET,IAAI,WAAW,MAAM;gBACrB,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;gBAE3B,YAAY,KAAK,EAAE;YACrB,EAAE,OAAO,KAAc;gBACrB,QAAQ,KAAK,CAAC,uBAAuB;gBACrC,SAAS;YACX,SAAU;gBACR,WAAW;YACb;QACF;QAEA;IACF,GAAG,EAAE;IAEL,MAAM,eAAe;QACnB,MAAM,4HAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,OAAO;QAC3B,aAAa,UAAU,CAAC,cAAc,aAAa;QACnD,OAAO,IAAI,CAAC,MAAM,wBAAwB;IAC5C;IAEA,IAAI,SAAS;QACX,qBAAO,8OAAC;YAAI,WAAU;sBAAoB;;;;;;IAC5C;IAEA,IAAI,OAAO;QACT,qBAAO,8OAAC;YAAI,WAAU;;gBAAmB;gBAAG;;;;;;;IAC9C;IAEA,IAAI,CAAC,UAAU;QACb,qBAAO,8OAAC;YAAI,WAAU;sBAAmB;;;;;;IAC3C;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;sCAAqC;;;;;;sCACnD,8OAAC;4BACC,SAAS;4BACT,WAAU;sCACX;;;;;;;;;;;;8BAKH,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BACC,SAAS,IAAM,aAAa;4BAC5B,WAAW,CAAC,uBAAuB,EACjC,cAAc,WAAW,6BAA6B,6BACtD;sCACH;;;;;;sCAGD,8OAAC;4BACC,SAAS,IAAM,aAAa;4BAC5B,WAAW,CAAC,uBAAuB,EACjC,cAAc,SAAS,6BAA6B,6BACpD;sCACH;;;;;;;;;;;;gBAKF,cAAc,yBACb,8OAAC,qKAAA,CAAA,UAAiB;oBAAC,UAAU;;;;;yCAE7B,8OAAC,mKAAA,CAAA,UAAe;oBAAC,UAAU;;;;;;;;;;;;;;;;;AAKrC","debugId":null}}]
}