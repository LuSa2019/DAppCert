{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/lib/aggiungi-certificato.js"],"sourcesContent":["// lib/aggiungi-certificato.js\r\nimport { ethers } from \"ethers\";\r\nimport { CertificatiABI } from \"./abi/CertificatiABI.js\";\r\n\r\nexport async function aggiungiCertificato(hash) {\r\n  if (!process.env.RPC_URL || !process.env.WALLET_PRIVATE_KEY || !process.env.CONTRACT_ADDRESS) {\r\n    throw new Error(\"Variabili ambiente mancanti\");\r\n  }\r\n\r\n  // Provider con chainId fisso (Sepolia = 11155111)\r\n  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL, 11155111);\r\n\r\n  const wallet = new ethers.Wallet(process.env.WALLET_PRIVATE_KEY, provider);\r\n  console.log(\"✅ Wallet pronto:\", wallet.address);\r\n\r\n  const contract = new ethers.Contract(process.env.CONTRACT_ADDRESS, CertificatiABI, wallet);\r\n  console.log(\"✅ Contratto connesso:\", contract.address);\r\n\r\n  // Converte l’hash in bytes32\r\n  const formattedHash = ethers.utils.hexZeroPad(hash.startsWith(\"0x\") ? hash : \"0x\" + hash, 32);\r\n\r\n  // Transazione\r\n  const tx = await contract.aggiungiCertificato(formattedHash);\r\n  const receipt = await tx.wait();\r\n\r\n  return {\r\n    txHash: tx.hash,\r\n    blockNumber: receipt.blockNumber\r\n  };\r\n}\r\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;AAC9B;;;;;;;;AAGO,eAAe,oBAAoB,IAAI;IAC5C,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,kBAAkB,IAAI,CAAC,QAAQ,GAAG,CAAC,gBAAgB,EAAE;QAC5F,MAAM,IAAI,MAAM;IAClB;IAEA,kDAAkD;IAClD,MAAM,WAAW,IAAI,kLAAA,CAAA,SAAM,CAAC,SAAS,CAAC,eAAe,CAAC,QAAQ,GAAG,CAAC,OAAO,EAAE;IAE3E,MAAM,SAAS,IAAI,kLAAA,CAAA,SAAM,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,kBAAkB,EAAE;IACjE,QAAQ,GAAG,CAAC,oBAAoB,OAAO,OAAO;IAE9C,MAAM,WAAW,IAAI,kLAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,CAAC,gBAAgB,EAAE,gBAAgB;IACnF,QAAQ,GAAG,CAAC,yBAAyB,SAAS,OAAO;IAErD,6BAA6B;IAC7B,MAAM,gBAAgB,kLAAA,CAAA,SAAM,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,UAAU,CAAC,QAAQ,OAAO,OAAO,MAAM;IAE1F,cAAc;IACd,MAAM,KAAK,MAAM,SAAS,mBAAmB,CAAC;IAC9C,MAAM,UAAU,MAAM,GAAG,IAAI;IAE7B,OAAO;QACL,QAAQ,GAAG,IAAI;QACf,aAAa,QAAQ,WAAW;IAClC;AACF","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universita/Tesi/DAppCert/verifica-certificati/src/app/api/aggiungi-certificato/route.ts"],"sourcesContent":["// app/api/aggiungi-certificato/route.ts\r\nimport { NextResponse } from \"next/server\";\r\n\r\n// Importa la funzione JS\r\nimport { aggiungiCertificato } from \"@/lib/aggiungi-certificato.js\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { hash } = await req.json();\r\n\r\n    if (!hash || typeof hash !== \"string\") {\r\n      return NextResponse.json(\r\n        { error: \"Hash mancante o non valido\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const result = await aggiungiCertificato(hash);\r\n\r\n    return NextResponse.json({\r\n      message: \"Certificato aggiunto con successo\",\r\n      ...result\r\n    });\r\n  } catch (err: any) {\r\n    console.error(\"❌ Errore API aggiungi-certificato:\", err);\r\n    return NextResponse.json(\r\n      { error: err?.message ?? \"Errore interno\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,wCAAwC;;;;AACxC;AAEA,yBAAyB;AACzB;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/B,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,sBAAmB,AAAD,EAAE;QAEzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,GAAG,MAAM;QACX;IACF,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,KAAK,WAAW;QAAiB,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}