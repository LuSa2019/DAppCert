{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/lib/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = 'https://rygyqxalcvxrekpfkqga.supabase.co';  \r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ5Z3lxeGFsY3Z4cmVrcGZrcWdhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MzM5NjcsImV4cCI6MjA2NjAwOTk2N30.lo2ydzPjibp2nl3W_hnhQNP4od_jprdw4RDVHyXKDJ0';        \r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc;AACpB,MAAM,kBAAkB;AAEjB,MAAM,WAAW,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/app/actions/registerStudent.ts"],"sourcesContent":["import { supabase } from '@/lib/supabaseClient';\r\nimport bcrypt from 'bcryptjs';\r\n\r\ninterface StudentData {\r\n  nome: string;\r\n  cognome: string;\r\n  dataNascita: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport default async function registerStudent(data: StudentData) {\r\n  // Calcola l'hash\r\n  const passwordHash = await bcrypt.hash(data.password, 10);\r\n  const { error } = await supabase\r\n    .from('users')\r\n    .insert({\r\n      nome: data.nome,\r\n      cognome: data.cognome,\r\n      data_nascita: data.dataNascita,\r\n      email: data.email,\r\n      password_hash: passwordHash,\r\n    });\r\n\r\n  if (error) throw error;\r\n\r\n  return { success: true };\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAUe,eAAe,gBAAgB,IAAiB;IAC7D,iBAAiB;IACjB,MAAM,eAAe,MAAM,oIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;IACtD,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,+HAAA,CAAA,WAAQ,CAC7B,IAAI,CAAC,SACL,MAAM,CAAC;QACN,MAAM,KAAK,IAAI;QACf,SAAS,KAAK,OAAO;QACrB,cAAc,KAAK,WAAW;QAC9B,OAAO,KAAK,KAAK;QACjB,eAAe;IACjB;IAEF,IAAI,OAAO,MAAM;IAEjB,OAAO;QAAE,SAAS;IAAK;AACzB","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/app/actions/registerEntity.ts"],"sourcesContent":["import { supabase } from '@/lib/supabaseClient';\r\nimport bcrypt from 'bcryptjs';\r\n\r\ninterface EntityData {\r\n  nome: string;\r\n  email: string;\r\n  password: string; // hash della password!\r\n}\r\n\r\nexport default async function registerEntity(data: EntityData) {\r\n  // Calcola l'hash\r\n  const passwordHash = await bcrypt.hash(data.password, 10);\r\n  const { error } = await supabase\r\n    .from('entities')\r\n    .insert({\r\n      nome_ente: data.nome,\r\n      email: data.email,\r\n      password_hash: passwordHash,\r\n    });\r\n\r\n  if (error) throw error;\r\n\r\n  return { success: true };\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAQe,eAAe,eAAe,IAAgB;IAC3D,iBAAiB;IACjB,MAAM,eAAe,MAAM,oIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;IACtD,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,+HAAA,CAAA,WAAQ,CAC7B,IAAI,CAAC,YACL,MAAM,CAAC;QACN,WAAW,KAAK,IAAI;QACpB,OAAO,KAAK,KAAK;QACjB,eAAe;IACjB;IAEF,IAAI,OAAO,MAAM;IAEjB,OAAO;QAAE,SAAS;IAAK;AACzB","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/app/actions/loginStudent.ts"],"sourcesContent":["'use server';\r\n\r\nimport { supabase } from '@/lib/supabaseClient';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nexport default async function loginEntity({ email, password }: { email: string; password: string }) {\r\n  const { data, error } = await supabase\r\n    .from('users')\r\n    .select('*')\r\n    .eq('email', email)\r\n    .single();\r\n\r\n  if (error || !data) {\r\n    throw new Error('Email non trovata');\r\n  }\r\n\r\n  const passwordMatch = await bcrypt.compare(password, data.password);\r\n  if (!passwordMatch) {\r\n    throw new Error('Password errata');\r\n  }\r\n\r\n  // Autenticazione riuscita: puoi salvare info in sessione o cookies (es: JWT, o NextAuth, o altra strategia)\r\n  return {\r\n    id: data.id,\r\n    nome: data.nome,\r\n    email: data.email\r\n    // altri dati se servono\r\n  };\r\n}\r\n"],"names":[],"mappings":";;;;;;qQAK8B,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/app/actions/loginEntity.ts"],"sourcesContent":["import { supabase } from '@/lib/supabaseClient';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nexport default async function loginEntity({\r\n  email,\r\n  password\r\n}: {\r\n  email: string;\r\n  password: string;\r\n}) {\r\n  const trimmedEmail = email.trim();\r\n\r\n  const { data, error } = await supabase\r\n    .from('entities')\r\n    .select('id, nome_ente, email, password_hash') // <-- usa il nome corretto del campo\r\n    .eq('email', trimmedEmail)\r\n    .single();\r\n\r\n  if (error || !data) {\r\n    throw new Error('Email non trovata');\r\n  }\r\n\r\n  if (!data.password_hash) {\r\n    console.error('Campo password_hash non trovato nel record:', data);\r\n    throw new Error('Errore interno: password non presente');\r\n  }\r\n\r\n  const passwordMatch = await bcrypt.compare(password, data.password_hash);\r\n  if (!passwordMatch) {\r\n    throw new Error('Password errata');\r\n  }\r\n\r\n  return {\r\n    id: data.id,\r\n    nome: data.nome_ente,\r\n    email: data.email\r\n  };\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEe,eAAe,YAAY,EACxC,KAAK,EACL,QAAQ,EAIT;IACC,MAAM,eAAe,MAAM,IAAI;IAE/B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,+HAAA,CAAA,WAAQ,CACnC,IAAI,CAAC,YACL,MAAM,CAAC,uCAAuC,qCAAqC;KACnF,EAAE,CAAC,SAAS,cACZ,MAAM;IAET,IAAI,SAAS,CAAC,MAAM;QAClB,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,CAAC,KAAK,aAAa,EAAE;QACvB,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,gBAAgB,MAAM,oIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,aAAa;IACvE,IAAI,CAAC,eAAe;QAClB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;QACL,IAAI,KAAK,EAAE;QACX,MAAM,KAAK,SAAS;QACpB,OAAO,KAAK,KAAK;IACnB;AACF","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/39340/Desktop/Universit%C3%A0/Tesi/DAppCert/verifica-certificati/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport Image from 'next/image';\nimport { useRouter } from 'next/navigation';\nimport { GraduationCap, Building2, Search } from 'lucide-react';\nimport registerStudent from '@/app/actions/registerStudent';\nimport registerEntity from '@/app/actions/registerEntity';\nimport loginStudent from '@/app/actions/loginStudent';\nimport loginEntity from '@/app/actions/loginEntity';\nimport Link from 'next/link';\n\ntype FormData = {\n  nome?: string;\n  cognome?: string;\n  dataNascita?: string;\n  email: string;\n  password: string;\n  confirmPassword?: string;\n};\n\ntype ActionMode = 'register' | 'login';\ntype UserType = 'student' | 'entity';\n\nexport default function Home() {\n  const [formData, setFormData] = useState<FormData>({\n    nome: '',\n    cognome: '',\n    dataNascita: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  });\n  const [userType, setUserType] = useState<UserType | null>(null);\n  const [actionMode, setActionMode] = useState<ActionMode>('register');\n  const [showForm, setShowForm] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);\n  const router = useRouter();\n\n  const validatePassword = (pw: string) =>\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/.test(pw);\n  const validateEmail = (email: string) =>\n    /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n\n  const resetForm = () => {\n    setFormData({ nome: '', cognome: '', dataNascita: '', email: '', password: '', confirmPassword: '' });\n    setMessage(null);\n    setLoading(false);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setMessage(null);\n    setLoading(true);\n\n    if (!validateEmail(formData.email)) {\n      setMessage({ type: 'error', text: 'Email non valida' });\n      setLoading(false);\n      return;\n    }\n    if (actionMode === 'register') {\n      if (formData.password !== formData.confirmPassword) {\n        setMessage({ type: 'error', text: 'Le password non coincidono' });\n        setLoading(false);\n        return;\n      }\n      if (!validatePassword(formData.password)) {\n        setMessage({ type: 'error', text: 'La password deve avere almeno 8 caratteri, una maiuscola, una minuscola, un numero e un simbolo.' });\n        setLoading(false);\n        return;\n      }\n    }\n\n    try {\n      if (actionMode === 'register') {\n        if (userType === 'student') {\n          await registerStudent({\n            nome: formData.nome!,\n            cognome: formData.cognome!,\n            dataNascita: formData.dataNascita!,\n            email: formData.email,\n            password: formData.password,\n          });\n        } else {\n          await registerEntity({\n            nome: formData.nome!,\n            email: formData.email,\n            password: formData.password,\n          });\n        }\n        setMessage({ type: 'success', text: 'Registrazione avvenuta con successo!' });\n      } else {\n        if (userType === 'student') {\n          await loginStudent({ email: formData.email, password: formData.password });\n          router.push('/dashboard-student');\n        } else {\n          await loginEntity({ email: formData.email, password: formData.password });\n          router.push('/dashboard-entity');\n        }\n      }\n      setTimeout(() => {\n        resetForm();\n        setShowForm(false);\n        setUserType(null);\n      }, 3000); // aspetta 3 secondi\n    } catch (error) {\n      const msg = error instanceof Error ? error.message : String(error);\n      setMessage({ type: 'error', text: msg || 'Errore generico.' });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"min-h-screen bg-gradient-to-br from-indigo-900 to-blue-700 text-white flex flex-col\">\n      <header className=\"p-6 text-center text-5xl md:text-6xl font-extrabold tracking-tight\">UniChain</header>\n\n      <section className=\"flex flex-col md:flex-row justify-center items-center gap-8 px-6 py-12\">\n        <div className=\"max-w-xl text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-extrabold mb-6 leading-tight drop-shadow-lg\">\n            La tua identità accademica sulla Blockchain\n          </h1>\n          <p className=\"text-lg text-gray-200 mb-4\">Registrazione e verifica dei certificati in modo trasparente e sicuro.</p>\n        </div>\n        <Image src=\"https://www.netgroup.it/wp-content/uploads/2023/04/Blockchain-Technology_2.jpg\"\n          alt=\"Blockchain\" width={600} height={400}\n          className=\"rounded-xl shadow-2xl object-cover\" priority />\n      </section>\n\n      <section className=\"grid grid-cols-1 md:grid-cols-3 gap-6 px-8 py-12 text-center\">\n        {['entity', 'student'].map(type => (\n          <div key={type} className=\"bg-white text-gray-900 rounded-2xl p-6 shadow-xl\">\n            <div className=\"flex items-center justify-center gap-2 mb-3 text-indigo-700\">\n              {type === 'student' ? <GraduationCap size={32} /> : <Building2 size={32} />}\n              <h2 className=\"text-3xl font-bold\">{type === 'student' ? 'Studenti' : 'Enti'}</h2>\n            </div>\n            <p className=\"mb-6\">\n              {type === 'student'\n                ? 'Consulta e gestisci i tuoi certificati accademici.'\n                : 'Crea, gestisci e assegna certificati accademici.'}\n            </p>\n            <div className=\"flex flex-col gap-3\">\n              <button onClick={() => { resetForm(); setShowForm(true); setUserType(type as UserType); setActionMode('register'); }}\n                className=\"bg-indigo-700 text-white py-2 px-4 rounded-lg hover:bg-indigo-800\">Registrati</button>\n              <button onClick={() => { resetForm(); setShowForm(true); setUserType(type as UserType); setActionMode('login'); }}\n                className=\"border border-indigo-700 text-indigo-700 py-2 px-4 rounded-lg hover:bg-indigo-100\">Login</button>\n            </div>\n          </div>\n        ))}\n\n        <div className=\"bg-white text-gray-900 rounded-2xl p-6 shadow-xl\">\n          <div className=\"flex items-center justify-center gap-2 mb-3 text-green-600\">\n            <Search size={32} /><h2 className=\"text-3xl font-bold\">Verifica</h2>\n          </div>\n          <p className=\"mb-6\">Inserisci l&apos;ID del certificato per verificarne l&apos;autenticità.</p>\n          <Link href=\"/verify\" className=\"bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700\">Verifica Certificato</Link>\n        </div>\n      </section>\n\n      {showForm && (\n        <section className=\"bg-white text-gray-900 p-6 rounded-xl shadow-xl mx-auto mb-12 w-full max-w-xl\">\n          <h2 className=\"text-2xl font-bold mb-4\">\n            {actionMode === 'register' ? 'Registrazione' : 'Login'} {userType === 'student' ? 'Studente' : 'Ente'}\n          </h2>\n\n          <form className=\"flex flex-col gap-3 mt-4\" onSubmit={handleSubmit}>\n            {actionMode === 'register' && userType === 'student' && (\n              <>\n                <input name=\"nome\" onChange={handleChange} value={formData.nome || ''} type=\"text\" placeholder=\"Nome\" className=\"border p-2 rounded\" required />\n                <input name=\"cognome\" onChange={handleChange} value={formData.cognome || ''} type=\"text\" placeholder=\"Cognome\" className=\"border p-2 rounded\" required />\n                <input name=\"dataNascita\" onChange={handleChange} value={formData.dataNascita || ''} type=\"date\" className=\"border p-2 rounded\" required />\n              </>\n            )}\n            {actionMode === 'register' && userType === 'entity' && (\n              <input name=\"nome\" onChange={handleChange} value={formData.nome || ''} type=\"text\" placeholder=\"Nome Ente\" className=\"border p-2 rounded\" required />\n            )}\n\n            <input name=\"email\" onChange={handleChange} value={formData.email} type=\"email\" placeholder=\"Email\" className=\"border p-2 rounded\" required />\n            <input name=\"password\" onChange={handleChange} value={formData.password} type=\"password\" placeholder=\"Password\" className=\"border p-2 rounded\" required />\n            {actionMode === 'register' && (\n              <input name=\"confirmPassword\" onChange={handleChange} value={formData.confirmPassword || ''} type=\"password\" placeholder=\"Conferma Password\" className=\"border p-2 rounded\" required />\n            )}\n\n            {message && (\n              <div className={`${message.type === 'error' ? 'text-red-600' : 'text-green-600'} text-sm`}>\n                {message.text}\n              </div>\n            )}\n\n            <button type=\"submit\" disabled={loading} className=\"bg-indigo-700 text-white py-2 px-4 rounded-lg hover:bg-indigo-800\">\n              {loading ? 'Elaborazione...' : actionMode === 'register' ? 'Registrati' : 'Accedi'}\n            </button>\n          </form>\n\n          <button onClick={() => { setShowForm(false); resetForm(); }} className=\"mt-4 text-sm text-gray-600 underline\">\n            Annulla\n          </button>\n        </section>\n      )}\n\n      <footer className=\"text-center py-4 text-sm text-gray-300 border-t border-gray-600\">\n        © 2025 UniChain - Tutti i diritti riservati\n      </footer>\n    </main>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}